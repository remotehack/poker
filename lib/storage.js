const ULID = require('ulid');

var objectName = {
    sessions: {
        "dev123": {
            participants: {},
            scores: {}
        }
    }
};

/**
 * Creates a new session with a generated session ID.
 * 
 * @return string Generated ULID of the session.
 */
objectName.newSession = function () {
    var sessionID = this.generateSessionID();
    this.sessions[sessionID] = {
        participants: {},
        scores: {}
    };

    return sessionID;
};

/**
 * Adds a participant to a session with a connection id and display name. Connection
 * ID is auto generated by the ws connection, displayname comes from user input.
 * 
 * Returns complete session object.
 * 
 * @param string sessionID    A valid ULID session id.
 * @param string connectionID Connection ID specified by the ws library.
 * @param string displayName  User's chosen display name.
 * @return object             Entire session object.
 */
objectName.addParticipant = function (sessionID, connectionID, displayName) {
    if (undefined === this.sessions[sessionID]) {
        return false; // no such session id
    }

    if (undefined !== this.sessions[sessionID].participants[connectionID]) {
        return false; // participant with that connectionID already exists
    }

    this.sessions[sessionID].participants[connectionID] = displayName;

    return this.sessions[sessionID];
};

/**
 * Remove participant from session by their connectionID. Also removes their score.
 * 
 * Returns the new entire session object without the participant or their score.
 * 
 * Example:
 * {
 *      participants: {
 *          "0.982374": Bob,
 *          "0.dn388do": Alice
 *      },
 *      scores: {
 *          "0.982374": 888,
 *          "0.dn388do": 666
 *      }
 * }
 * 
 * @param string sessionID    A valid ULID session id.
 * @param string connectionID Connection ID specified by the ws library.
 * @return object             Entire session object.
 */
objectName.removeParticipant = function (sessionID, connectionID) {
    if (undefined === this.sessions[sessionID]) {
        return false; // no such session id
    }

    if (undefined === this.sessions[sessionID].participants[connectionID]) {
        return false; // participant with that connectionID doesn't exist, can't remove
    }

    delete this.sessions[sessionID].participants[connectionID]
    delete this.sessions[sessionID].scores[connectionID]

    return this.sessions[sessionID];
};

/**
 * Takes a session ID, connection ID, and score, and updates the score given
 * by the connection ID on the session id.
 * 
 * It overwrites the current score given by the user 
 * 
 * Returns the session object with the new object details.
 * 
 * {
 *      participants: {
 *          "0.982374": Bob,
 *          "0.dn388do": Alice
 *      },
 *      scores: {
 *          "0.982374": 888,
 *          "0.dn388do": 666
 *      }
 * }
 * 
 * @param string sessionID    A valid ULID session id string.
 * @param string connectionID The connectionID as given by the ws connection.
 * @param number score        Score submitted by the person.
 */
objectName.submitScore = function (sessionID, connectionID, score) {
    if (undefined === this.sessions[sessionID]) {
        return false; // no such session id
    }

    if (undefined === this.sessions[sessionID].participants[connectionID]) {
        return false; // participant with that name does not exist
    }

    this.sessions[sessionID].scores[connectionID] = score;

    return this.sessions[sessionID];
};

/**
 * Wipes the scores for the current session.
 * 
 * {
 *      participants: {
 *          "0.982374": Bob,
 *          "0.dn388do": Alice
 *      },
 *      scores: {}
 * }
 * 
 * @param string sessionID A valid ULID session ID string.
 * @return json            Data for the session listing only the participants, and an empty scores object.
 */
objectName.clearScores = function (sessionID) {
    if (undefined === this.sessions[sessionID]) {
        return false; // no such session id
    }

    this.sessions[sessionID].scores = {};

    return this.sessions[sessionID];
}

/**
 * For a given session ID, returns all of the data associated with it:
 * 
 * Example:
 * 
 * {
 *      participants: {
 *          "0.982374": Bob,
 *          "0.dn388do": Alice
 *      },
 *      scores: {
 *          "0.982374": 888,
 *          "0.dn388do": 666
 *      }
 * }
 * 
 * @param string sessionID A valid ULID session ID
 * @return json            Data about the requested session ID
 */
objectName.showCaseSession = function (sessionID) {
    if (undefined === this.sessions[sessionID]) {
        return false;
    }
    return this.sessions[sessionID];
    // returns each task with all of the estimates
};

/**
 * Generates a ULID to be used as session ID.
 * 
 * @return string An ULID string.
 */
objectName.generateSessionID = function () {
    return ULID.ulid();
}

module.exports = objectName;
